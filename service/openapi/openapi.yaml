openapi: 3.0.3
info:
  title: Neotool Service API
  description: |
    REST API for the Neotool service providing product management, customer management, 
    dashboard analytics, and event logging capabilities.
  version: 1.0.0
  contact:
    name: Neotool Team
    email: support@neotool.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://api.neotool.com
    description: Production server

paths:
  # Products API
  /api/products:
    get:
      summary: List all products
      description: Retrieve a list of all products
      operationId: listProducts
      tags:
        - Products
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              examples:
                products:
                  summary: List of products
                  value:
                    - id: 1
                      name: "Laptop Pro"
                      sku: "LAPTOP-001"
                      priceCents: 129999
                      stock: 50
                      createdAt: "2024-01-15T10:30:00"
                      updatedAt: "2024-01-15T10:30:00"
                    - id: 2
                      name: "Wireless Mouse"
                      sku: "MOUSE-001"
                      priceCents: 2999
                      stock: 200
                      createdAt: "2024-01-15T10:30:00"
                      updatedAt: "2024-01-15T10:30:00"

    post:
      summary: Create a new product
      description: Create a new product with the provided details
      operationId: createProduct
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
            examples:
              laptop:
                summary: Create a laptop product
                value:
                  name: "Gaming Laptop"
                  sku: "GAMING-LAPTOP-001"
                  priceCents: 199999
                  stock: 25
      responses:
        '200':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/products/{id}:
    get:
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      operationId: getProduct
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update product
      description: Update an existing product
      operationId: updateProduct
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete product
      description: Delete a product by ID
      operationId: deleteProduct
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: boolean
                    example: true

  # Customers API
  /api/customers:
    get:
      summary: List all customers
      description: Retrieve a list of all customers
      operationId: listCustomers
      tags:
        - Customers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
              examples:
                customers:
                  summary: List of customers
                  value:
                    - id: 1
                      name: "John Doe"
                      email: "john.doe@example.com"
                      status: "ACTIVE"
                      createdAt: "2024-01-15T10:30:00"
                      updatedAt: "2024-01-15T10:30:00"
                    - id: 2
                      name: "Jane Smith"
                      email: "jane.smith@example.com"
                      status: "INACTIVE"
                      createdAt: "2024-01-15T10:30:00"
                      updatedAt: "2024-01-15T10:30:00"

    post:
      summary: Create a new customer
      description: Create a new customer with the provided details
      operationId: createCustomer
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInput'
            examples:
              customer:
                summary: Create a new customer
                value:
                  name: "Alice Johnson"
                  email: "alice.johnson@example.com"
                  status: "ACTIVE"
      responses:
        '200':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/customers/{id}:
    get:
      summary: Get customer by ID
      description: Retrieve a specific customer by their ID
      operationId: getCustomer
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          required: true
          description: Customer ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Customer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update customer
      description: Update an existing customer
      operationId: updateCustomer
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          required: true
          description: Customer ID
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInput'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete customer
      description: Delete a customer by ID
      operationId: deleteCustomer
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          required: true
          description: Customer ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Customer deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: boolean
                    example: true

  # Dashboard API
  /api/dashboard/summary:
    get:
      summary: Get dashboard summary
      description: Retrieve dashboard summary statistics
      operationId: getDashboardSummary
      tags:
        - Dashboard
      responses:
        '200':
          description: Dashboard summary retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardSummary'
              examples:
                summary:
                  summary: Dashboard summary
                  value:
                    totalProducts: 150
                    totalCustomers: 75
                    activeCustomers: 68
                    inventoryValueCents: 12500000

  /api/dashboard/timeseries:
    get:
      summary: Get dashboard timeseries data
      description: Retrieve timeseries data for dashboard charts
      operationId: getDashboardTimeseries
      tags:
        - Dashboard
      parameters:
        - name: days
          in: query
          required: false
          description: Number of days to retrieve (7-90)
          schema:
            type: integer
            minimum: 7
            maximum: 90
            default: 30
            example: 30
      responses:
        '200':
          description: Timeseries data retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Point'
              examples:
                timeseries:
                  summary: 30-day timeseries
                  value:
                    - date: "2024-01-01"
                      value: 12
                    - date: "2024-01-02"
                      value: 8
                    - date: "2024-01-03"
                      value: 15

  # Events API
  /api/events:
    get:
      summary: List events
      description: Retrieve event log entries with optional filtering
      operationId: listEvents
      tags:
        - Events
      parameters:
        - name: entity
          in: query
          required: false
          description: Filter by entity type
          schema:
            type: string
            example: "product"
        - name: eventType
          in: query
          required: false
          description: Filter by event type
          schema:
            type: string
            example: "created"
        - name: limit
          in: query
          required: false
          description: Maximum number of events to return (1-500)
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 50
            example: 50
      responses:
        '200':
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventRow'
              examples:
                events:
                  summary: Event log entries
                  value:
                    - id: 1
                      entity: "product"
                      entityId: 123
                      eventType: "created"
                      payload: '{"name":"New Product","sku":"PROD-001"}'
                      createdAt: "2024-01-15 10:30:00"
                    - id: 2
                      entity: "customer"
                      entityId: 456
                      eventType: "updated"
                      payload: '{"status":"ACTIVE"}'
                      createdAt: "2024-01-15 10:35:00"

  # GraphQL endpoint
  /graphql:
    post:
      summary: GraphQL endpoint
      description: |
        GraphQL endpoint for querying and mutating data. Supports both queries and mutations
        for products and customers with full CRUD operations.
      operationId: graphqlQuery
      tags:
        - GraphQL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GraphQLRequest'
            examples:
              query_products:
                summary: Query all products
                value:
                  query: |
                    query {
                      products {
                        id
                        name
                        sku
                        priceCents
                        stock
                        createdAt
                        updatedAt
                      }
                    }
              query_customers:
                summary: Query all customers
                value:
                  query: |
                    query {
                      customers {
                        id
                        name
                        email
                        status
                        createdAt
                        updatedAt
                      }
                    }
              create_product:
                summary: Create a product
                value:
                  query: |
                    mutation {
                      createProduct(input: {
                        name: "New Product"
                        sku: "NEW-001"
                        priceCents: 9999
                        stock: 10
                      }) {
                        id
                        name
                        sku
                        priceCents
                        stock
                      }
                    }
              update_customer:
                summary: Update a customer
                value:
                  query: |
                    mutation {
                      updateCustomer(id: "1", input: {
                        name: "Updated Name"
                        email: "updated@example.com"
                        status: "ACTIVE"
                      }) {
                        id
                        name
                        email
                        status
                      }
                    }
      responses:
        '200':
          description: GraphQL response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphQLResponse'
              examples:
                products_response:
                  summary: Products query response
                  value:
                    data:
                      products:
                        - id: "1"
                          name: "Laptop Pro"
                          sku: "LAPTOP-001"
                          priceCents: 129999
                          stock: 50
                          createdAt: "2024-01-15T10:30:00"
                          updatedAt: "2024-01-15T10:30:00"
                error_response:
                  summary: GraphQL error response
                  value:
                    errors:
                      - message: "Validation error: Product name is required"
                        locations:
                          - line: 2
                          column: 3
                        path:
                          - createProduct

components:
  schemas:
    Product:
      type: object
      required:
        - id
        - name
        - sku
        - priceCents
        - stock
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          format: int64
          description: Unique product identifier
          example: 1
        name:
          type: string
          description: Product name
          example: "Laptop Pro"
        sku:
          type: string
          description: Stock Keeping Unit
          example: "LAPTOP-001"
        priceCents:
          type: integer
          format: int64
          description: Price in cents
          example: 129999
        stock:
          type: integer
          description: Available stock quantity
          example: 50
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00"

    ProductInput:
      type: object
      required:
        - name
        - sku
        - priceCents
        - stock
      properties:
        name:
          type: string
          description: Product name
          example: "Laptop Pro"
        sku:
          type: string
          description: Stock Keeping Unit
          example: "LAPTOP-001"
        priceCents:
          type: integer
          format: int64
          description: Price in cents
          example: 129999
        stock:
          type: integer
          description: Available stock quantity
          example: 50

    Customer:
      type: object
      required:
        - id
        - name
        - email
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          format: int64
          description: Unique customer identifier
          example: 1
        name:
          type: string
          description: Customer name
          example: "John Doe"
        email:
          type: string
          format: email
          description: Customer email address
          example: "john.doe@example.com"
        status:
          type: string
          enum: [ACTIVE, INACTIVE, SUSPENDED]
          description: Customer status
          example: "ACTIVE"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-15T10:30:00"

    CustomerInput:
      type: object
      required:
        - name
        - email
        - status
      properties:
        name:
          type: string
          description: Customer name
          example: "John Doe"
        email:
          type: string
          format: email
          description: Customer email address
          example: "john.doe@example.com"
        status:
          type: string
          enum: [ACTIVE, INACTIVE, SUSPENDED]
          description: Customer status
          example: "ACTIVE"

    DashboardSummary:
      type: object
      required:
        - totalProducts
        - totalCustomers
        - activeCustomers
        - inventoryValueCents
      properties:
        totalProducts:
          type: integer
          format: int64
          description: Total number of products
          example: 150
        totalCustomers:
          type: integer
          format: int64
          description: Total number of customers
          example: 75
        activeCustomers:
          type: integer
          format: int64
          description: Number of active customers
          example: 68
        inventoryValueCents:
          type: integer
          format: int64
          description: Total inventory value in cents
          example: 12500000

    Point:
      type: object
      required:
        - date
        - value
      properties:
        date:
          type: string
          format: date
          description: Date in YYYY-MM-DD format
          example: "2024-01-15"
        value:
          type: integer
          format: int64
          description: Value for this date
          example: 12

    EventRow:
      type: object
      required:
        - id
        - entity
        - eventType
        - createdAt
      properties:
        id:
          type: integer
          format: int64
          description: Event log ID
          example: 1
        entity:
          type: string
          description: Entity type
          example: "product"
        entityId:
          type: integer
          format: int64
          nullable: true
          description: ID of the affected entity
          example: 123
        eventType:
          type: string
          description: Type of event
          example: "created"
        payload:
          type: string
          nullable: true
          description: Event payload as JSON string
          example: '{"name":"New Product","sku":"PROD-001"}'
        createdAt:
          type: string
          description: Event timestamp
          example: "2024-01-15 10:30:00"

    GraphQLRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: GraphQL query or mutation
          example: "query { products { id name } }"
        variables:
          type: object
          description: GraphQL variables
          additionalProperties: true

    GraphQLResponse:
      type: object
      properties:
        data:
          type: object
          description: GraphQL response data
          additionalProperties: true
        errors:
          type: array
          description: GraphQL errors
          items:
            type: object
            properties:
              message:
                type: string
                description: Error message
              locations:
                type: array
                items:
                  type: object
                  properties:
                    line:
                      type: integer
                    column:
                      type: integer
              path:
                type: array
                items:
                  type: string

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Error message
          example: "Validation failed"
        code:
          type: string
          description: Error code
          example: "VALIDATION_ERROR"
        details:
          type: object
          description: Additional error details
          additionalProperties: true

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

tags:
  - name: Products
    description: Product management operations
  - name: Customers
    description: Customer management operations
  - name: Dashboard
    description: Dashboard analytics and reporting
  - name: Events
    description: Event logging and audit trail
  - name: GraphQL
    description: GraphQL queries and mutations