
services:
  postgres:
    image: postgres:16
    container_name: neotool-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-neotool}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-neotool}
      POSTGRES_DB: ${POSTGRES_DB:-neotool_db}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: neotool-redis
    restart: unless-stopped
    ports:
      - "6379:6379"

  kafka:
    image: bitnami/kafka:3.9.0
    container_name: neotool-kafka
    restart: unless-stopped
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - "9092:9092"

  loki:
    image: grafana/loki:2.9.8
    container_name: neotool-loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/config.yml:/etc/loki/local-config.yaml:ro
    ports:
      - "3100:3100"

  alloy:
    image: grafana/alloy:latest
    container_name: neotool-alloy
    command: run --config.file=/etc/alloy/config.alloy --server.http.listen-addr=0.0.0.0:12345
    volumes:
      - ./alloy/config.alloy:/etc/alloy/config.alloy:ro
      - /var/log:/var/log:ro
      - ../..:/workspace:ro
    ports:
      - "12345:12345"
    depends_on:
      - loki

  prometheus:
    image: prom/prometheus:v2.55.1
    container_name: neotool-prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-lifecycle
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  tempo:
    image: grafana/tempo:2.5.0
    container_name: neotool-tempo
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - ./tempo/tempo.yml:/etc/tempo.yml:ro
    ports:
      - "3200:3200"

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.105.0
    container_name: neotool-otel
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./otel-collector/config.yaml:/etc/otelcol/config.yaml:ro
    depends_on:
      - tempo

  grafana:
    image: grafana/grafana:11.1.4
    container_name: neotool-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    ports:
      - "3001:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning

  backend:
    build:
      context: ../../service
      dockerfile: app/Dockerfile
    container_name: neotool-backend
    env_file: ../../.env
    environment:
      MICRONAUT_ENVIRONMENTS: docker
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
    depends_on:
      - postgres
      - redis
      - kafka
      - otel-collector
    ports:
      - "8080:8080"

  web:
    build:
      context: ../../web
      dockerfile: Dockerfile
    container_name: neotool-web
    env_file: ../../.env
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8080}
    depends_on:
      - backend
    ports:
      - "3000:3000"

volumes:
  pgdata:
