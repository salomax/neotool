
services:

  # -------------------------------------------------------------
  # Tooling Stack (database, cache, message broker)
  # -------------------------------------------------------------

  postgres:
    image: postgres:18rc1
    container_name: neotool-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-neotool}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-neotool}
      POSTGRES_DB: ${POSTGRES_DB:-neotool_db}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: neotool-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka:
    image: apache/kafka:4.1.0
    container_name: neotool-kafka
    restart: unless-stopped
    environment:
      # Essential KRaft configuration
      - CLUSTER_ID=5L6g3nShT-eMCtK--X86sw
      - NODE_ID=1
      - PROCESS_ROLES=broker,controller
      - CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - CONTROLLER_LISTENER_NAMES=CONTROLLER
      - INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Useful for development
      - AUTO_CREATE_TOPICS_ENABLE=true
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "netstat -an | grep :9092 | grep LISTEN || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  router:
    image: ghcr.io/apollographql/router:v2.7.0
    container_name: neotool-graphql-router
    depends_on:
      - api
    ports:
      - "4000:4000"
      - "8088:8088"  # Health check port
      - "9091:9090"  # Metrics port (changed to avoid conflict with Prometheus)
    volumes:
      - ../../contracts/graphql/supergraph/supergraph.dev.graphql:/dist/supergraph.graphql:ro
      - ../../service/gateway/router/router.dev.yaml:/dist/router.yaml:ro
    command: ["--supergraph", "/dist/supergraph.graphql", "--config", "/dist/router.yaml"]
    environment:
      - APOLLO_ROUTER_TELEMETRY_METRICS_PROMETHEUS_ENABLED=true
      - APOLLO_ROUTER_TELEMETRY_METRICS_PROMETHEUS_LISTEN=0.0.0.0:9090
      - APOLLO_ROUTER_TELEMETRY_METRICS_PROMETHEUS_PATH=/metrics

  # -------------------------------------------------------------
  # Application Stack
  # -------------------------------------------------------------

  api:
    build:
      context: ../../service/kotlin
      dockerfile: app/Dockerfile
    container_name: neotool-api
    env_file: ../../.env
    environment:
      MICRONAUT_ENVIRONMENTS: docker
      KAFKA_BROKER: kafka:9092
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"

  web:
    build:
      context: ../../web
      dockerfile: Dockerfile
    container_name: neotool-web
    env_file: ../../.env
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8080}
      NEXT_PUBLIC_GRAPHQL_URL: ${NEXT_PUBLIC_GRAPHQL_URL:-http://router:4000/graphql}
    depends_on:
      - api
    ports:
      - "3000:3000"

  # -------------------------------------------------------------
  # Observability Stack
  # -------------------------------------------------------------

  # Observability Stack
  prometheus:
    image: prom/prometheus:v2.55.1
    container_name: neotool-prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-lifecycle
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  # PostgreSQL Exporter - monitors database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: neotool-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-neotool}:${POSTGRES_PASSWORD:-neotool}@postgres:5432/${POSTGRES_DB:-neotool_db}?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      postgres:
        condition: service_healthy

  # Redis Exporter - monitors cache metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: neotool-redis-exporter
    environment:
      REDIS_ADDR: "redis://redis:6379"
    ports:
      - "9121:9121"
    depends_on:
      redis:
        condition: service_healthy

  # Kafka Exporter - monitors message broker metrics
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: neotool-kafka-exporter
    command:
      - --kafka.server=kafka:9092
      - --web.listen-address=:9308
    ports:
      - "9308:9308"
    depends_on:
      kafka:
        condition: service_healthy

  grafana:
    image: grafana/grafana:11.1.4
    container_name: neotool-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    ports:
      - "3001:3000"
    volumes:
      - ../observability/grafana/provisioning:/etc/grafana/provisioning
      - ../observability/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - loki

  # Loki - Log aggregation system
  loki:
    image: grafana/loki:2.9.0
    container_name: neotool-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    depends_on:
      - prometheus

  # Promtail - Log collection agent
  promtail:
    image: grafana/promtail:2.9.0
    container_name: neotool-promtail
    volumes:
      - ../observability/promtail/promtail-config.yaml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
      
volumes:
  pgdata:
  loki-data:
