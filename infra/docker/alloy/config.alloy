// Grafana Alloy configuration to replace Promtail
// This configuration scrapes logs and forwards them to Loki

// Log scraping configuration
loki.source.file "docker_logs" {
  targets = [
    {
      __path__ = "/var/lib/docker/containers/*/*-json.log",
      job = "docker",
      host = "local",
    },
  ]
  
  forward_to = [loki.process.docker_logs.receiver]
}

loki.source.file "workspace_logs" {
  targets = [
    {
      __path__ = "/workspace/**/*.log",
      job = "workspace",
    },
  ]
  
  forward_to = [loki.process.workspace_logs.receiver]
}

// Process Docker logs
loki.process "docker_logs" {
  forward_to = [loki.write.loki_endpoint.receiver]
  
  stage.json {
    expressions = {
      output = "log",
      stream = "stream",
      attrs = "attrs",
    }
  }
  
  stage.json {
    expressions = {
      tag = "attrs.tag",
    }
    source = "attrs"
  }
  
  stage.regex {
    expression = "^(?P<container_id>(?:[^|]*))\\|(?P<image_name>(?:[^|]*))\\|(?P<container_name>(?:[^|]*))\\|(?P<restart_count>(?:[^|]*))\\|(?P<container_status>(?:[^|]*))\\|(?P<container_health>(?:[^|]*))\\|(?P<container_created>(?:[^|]*))\\|(?P<container_path>(?:[^|]*))\\|(?P<real_container_id>(?:[^|]*))"
    source = "tag"
  }
  
  stage.timestamp {
    source = "time"
    format = "RFC3339Nano"
  }
  
  stage.labels {
    values = {
      container_id = "container_id",
      container_name = "container_name",
      image_name = "image_name",
      stream = "stream",
    }
  }
  
  stage.output {
    source = "output"
  }
}

// Process workspace logs
loki.process "workspace_logs" {
  forward_to = [loki.write.loki_endpoint.receiver]
  
  stage.timestamp {
    source = "time"
    format = "RFC3339"
  }
  
  stage.labels {
    values = {
      job = "workspace",
      filename = "__path__",
    }
  }
}

// Write to Loki
loki.write "loki_endpoint" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}
